#!/usr/bin/env python

import argparse
import json
from getpass import getpass, getuser
from os import getenv, urandom
from os.path import expanduser, join
import string
import subprocess
from sys import exit, platform
import time

parser = argparse.ArgumentParser(description='A tiny password manager.')
parser.add_argument('alias', nargs='?', help='Alias of the password to read')
parser.add_argument('-i', '--init', action='store_true')
parser.add_argument('-r','--read', help='Password to fetch')
parser.add_argument('-u','--username', help='Fetch the username for an alias')
parser.add_argument('-w','--write', action='store_true', help='Write a new password to the safe')
parser.add_argument('-d', '--delete', help='Delete a password from the safe')

class Pick():
  def __init__(self, password, safe, config):
    self.password = password
    self.safe = safe
    self.config = config
    self.platform = self.get_platform()

  def write_safe(self, json_data):
    ''' Writes the given data to an ecrypted file using gpg '''
    with open('/dev/null', 'w') as null:
      # Send the data to encrypt into a pipe
      cmd1 = 'echo %s' % json.dumps(json_data)
      ps = subprocess.Popen(cmd1.split(), stdout=subprocess.PIPE)

      # Then encrypt the data from stdin
      cmd2 = 'gpg --symmetric --armor --batch --yes --passphrase %s --output %s' % (self.password, self.safe)
      ps2 = subprocess.check_output(cmd2.split(), stdin=ps.stdout, stderr=null)

  def read_safe(self):
    ''' Decrypts the safe and returns the parsed JSON '''
    with open('/dev/null', 'w') as null:
      cmd= 'gpg --decrypt --batch --armor --passphrase %s %s' % (self.password, self.safe)
      p1 = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE, stderr=null)
      secrets, err = p1.communicate()

      if err: 
        die(err, 102)

    try:
      return json.loads(secrets)
    except ValueError:
      die('Unable to read safe at %s' % self.safe, 101)

  def delete_password(self, alias):
    """ Deletes a password from the safe """
    safe = self.read_safe()

    if not alias in safe['data']:
      die('Alias not found')

    del safe['data'][alias]
    self.write_safe(safe)
    print 'Password deleted'

  def write_password(self):
    ''' Writes a password to the safe '''
    safe = self.read_safe()

    alias = get_input('Enter an Alias')
    if (
            alias in safe['data'] and 
            not get_answer('%s already exists, do you want to overwrite' % alias)
        ): die()

    username = get_input('Enter the account name (username/email/etc)')

    if get_answer('Generate password'):
      password = self.generate_password()
    else:
      password = getpass('Enter the password\n> ')

    now = int(time.time())
    safe['data'][alias] = {
            'alias': alias,
            'username': username,
            'password': password,
            'created_on': now,
            'modified_on': now
            }

    self.write_safe(safe)
    self.clip(password)
    print 'Password saved and copied to clipboard!'

  def read_password(self, alias):
    ''' Reads a password by alias '''
    safe = self.read_safe()

    if alias == 'all':
      return self.pretty_print(safe['data'])
    if alias not in safe['data']:
      die('Password not found')

    password = safe['data'][alias]['password']
    self.clip(password)

    if not self.config['silent']:
      print password

  def read_username(self, alias):
    """ Reads a username for an alias """
    safe = self.read_safe()

    if not alias in safe['data']:
      die('Alias not found')

    print safe['data'][alias]['username']

  def initialize_safe(self):
    ''' Creates a new safe with default values '''
    self.write_safe({
        'created_on': int(time.time()), 
        'created_by': getuser(), 
        'data':{}
    })

    print 'Safe created!'

  def generate_password(self, length=50):
    ''' Generates a random password of length '''
    rand_max = 256
    rand_excess = (rand_max + 1) % length
    rand_limit = rand_max - rand_excess
    chars = string.uppercase + string.lowercase + string.punctuation + string.letters

    def next_index():
      while True:
        x = ord(urandom(1))
        if x <= rand_limit:
          return x % length

    return ''.join(chars[next_index()] for _ in range(length))
    
  def get_platform(self):
    ''' Get the plaform we're running on '''
    if platform in ['linux', 'linux2']:
      return 'linux'
    elif platform == "darwin":
      return 'osx'
    else: 
      die('Unsupported platform %s' % platform)

  def pretty_print(self, json_data):
    ''' Pretty prints JSON '''
    print json.dumps(json_data, sort_keys=True, indent=4, separators=(',', ': '))

  def clip(self, text):
    ''' Copy the given text to the clipboard '''
    if self.platform == 'linux':
      process = subprocess.Popen(['xclip', '-sel', 'clip'], stdin=subprocess.PIPE)
    else:
      # Assumes OS X
      process = subprocess.Popen('pbcopy', stdin=subprocess.PIPE)

    process.communicate(text.encode('utf-8'))

def die(message='', code=100):
  print message
  exit(code)

def get_input(prompt):
  return raw_input('%s\n> ' % prompt)

def get_answer(prompt, default='y'):
  ''' Gets a y/n answer for the prompt '''
  answer = raw_input('%s? (y/n)\n> ' % prompt)
  if not answer: 
    answer = default

  return answer.lower().strip() == 'y'

def get_master_password():
  ''' Loads the password from the environment or prompts the user for it '''
  password = getenv('PICK_TOKEN', None)
  return password if password else getpass('Enter password\n> ')

def get_safe_path():
  ''' Loads the safe path from the environment or uses the default location '''
  default_safe_file = join(expanduser('~'), '.pick.safe')
  return getenv('PICK_SAFE', default_safe_file)

def get_config():
  ''' Loads the configuration from the environment or uses defaults '''
  try:
    config = json.loads(getenv('PICK_CONFIG', '{}'))

    if 'silent' not in config:
      config['silent'] = False

    return config
  except ValueError:
    die('Unable to read PICK_CONFIG', 101)


if __name__=='__main__':
  args = parser.parse_args()

  pick = Pick(
          password = get_master_password(),
          safe = get_safe_path(),
          config = get_config()
          )

  if args.alias:
    pick.read_password(args.alias)

  elif args.read:
    pick.read_password(args.read)

  elif args.username:
    pick.read_username(args.username)

  elif args.init:
    pick.initialize_safe()
  
  elif args.write:
    pick.write_password()

  elif args.delete:
    pick.delete_password(args.delete)
